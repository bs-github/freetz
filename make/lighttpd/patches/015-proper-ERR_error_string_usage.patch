--- src/connections.c
+++ src/connections.c
@@ -240,6 +240,8 @@
 
 			return 0;
 		case SSL_ERROR_SYSCALL:
+			{
+			char ssl_error_string_buf[256];
 			/**
 			 * man SSL_get_error()
 			 *
@@ -255,7 +257,7 @@
 			while((ssl_err = ERR_get_error())) {
 				/* get all errors from the error-queue */
 				log_error_write(srv, __FILE__, __LINE__, "sds", "SSL:",
-						r, ERR_error_string(ssl_err, NULL));
+						r, lighttpd_ERR_error_string_n(ssl_err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 			}
 
 			switch(oerrno) {
@@ -265,6 +267,7 @@
 						strerror(oerrno));
 				break;
 			}
+			}
 
 			break;
 		case SSL_ERROR_ZERO_RETURN:
@@ -276,6 +279,9 @@
 
 			/* fall thourgh */
 		default:
+			{
+			char ssl_error_string_buf[256];
+
 			while((ssl_err = ERR_get_error())) {
 				switch (ERR_GET_REASON(ssl_err)) {
 				case SSL_R_SSL_HANDSHAKE_FAILURE:
@@ -289,7 +295,8 @@
 				}
 				/* get all errors from the error-queue */
 				log_error_write(srv, __FILE__, __LINE__, "sds", "SSL:",
-				                r, ERR_error_string(ssl_err, NULL));
+				                r, lighttpd_ERR_error_string_n(ssl_err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
+			}
 			}
 			break;
 		}
@@ -1175,8 +1182,9 @@
 		/* connect FD to SSL */
 		if (srv_socket->is_ssl) {
 			if (NULL == (con->ssl = SSL_new(srv_socket->ssl_ctx))) {
+				char ssl_error_string_buf[256];
 				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL));
+						lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 
 				return NULL;
 			}
@@ -1186,8 +1194,9 @@
 			SSL_set_accept_state(con->ssl);
 
 			if (1 != (SSL_set_fd(con->ssl, cnt))) {
+				char ssl_error_string_buf[256];
 				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL));
+						lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 				return NULL;
 			}
 		}
@@ -1399,8 +1408,12 @@
 
 						break;
 					default:
+						{
+						char ssl_error_string_buf[256];
+
 						log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-								ERR_error_string(ERR_get_error(), NULL));
+								lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
+						}
 					}
 				}
 #endif
@@ -1518,10 +1531,11 @@
 					case SSL_ERROR_SYSCALL:
 						/* perhaps we have error waiting in our error-queue */
 						if (0 != (err = ERR_get_error())) {
+							char ssl_error_string_buf[256];
 							do {
 								log_error_write(srv, __FILE__, __LINE__, "sdds", "SSL:",
 										ssl_r, ret,
-										ERR_error_string(err, NULL));
+										lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 							} while((err = ERR_get_error()));
 						} else if (errno != 0) { /* ssl bug (see lighttpd ticket #2213): sometimes errno == 0 */
 							switch(errno) {
@@ -1538,10 +1552,14 @@
 
 						break;
 					default:
+						{
+						char ssl_error_string_buf[256];
+
 						while((err = ERR_get_error())) {
 							log_error_write(srv, __FILE__, __LINE__, "sdds", "SSL:",
 									ssl_r, ret,
-									ERR_error_string(err, NULL));
+									lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
+						}
 						}
 
 						break;
--- src/network.c
+++ src/network.c
@@ -121,24 +121,27 @@
 
 	/* first set certificate! setting private key checks whether certificate matches it */
 	if (!SSL_use_certificate(ssl, con->conf.ssl_pemfile_x509)) {
+		char ssl_error_string_buf[256];
 		log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
 			"failed to set certificate for TLS server name", con->tlsext_server_name,
-			ERR_error_string(ERR_get_error(), NULL));
+			lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 		return SSL_TLSEXT_ERR_ALERT_FATAL;
 	}
 
 	if (!SSL_use_PrivateKey(ssl, con->conf.ssl_pemfile_pkey)) {
+		char ssl_error_string_buf[256];
 		log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
 			"failed to set private key for TLS server name", con->tlsext_server_name,
-			ERR_error_string(ERR_get_error(), NULL));
+			lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 		return SSL_TLSEXT_ERR_ALERT_FATAL;
 	}
 
 	if (con->conf.ssl_verifyclient) {
 		if (NULL == con->conf.ssl_ca_file_cert_names) {
+			char ssl_error_string_buf[256];
 			log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
 				"can't verify client without ssl.ca-file for TLS server name", con->tlsext_server_name,
-				ERR_error_string(ERR_get_error(), NULL));
+				lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 			return SSL_TLSEXT_ERR_ALERT_FATAL;
 		}
 
@@ -599,9 +602,10 @@
 	if (NULL == (s->ssl_pemfile_pkey = evp_pkey_load_pem_file(srv, s->ssl_pemfile->ptr))) return -1;
 
 	if (!X509_check_private_key(s->ssl_pemfile_x509, s->ssl_pemfile_pkey)) {
+		char ssl_error_string_buf[256];
 		log_error_write(srv, __FILE__, __LINE__, "sssb", "SSL:",
 				"Private key does not match the certificate public key, reason:",
-				ERR_error_string(ERR_get_error(), NULL),
+				lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
 				s->ssl_pemfile);
 		return -1;
 	}
@@ -733,24 +737,27 @@
 		if (!buffer_string_is_empty(s->ssl_ca_file)) {
 			s->ssl_ca_file_cert_names = SSL_load_client_CA_file(s->ssl_ca_file->ptr);
 			if (NULL == s->ssl_ca_file_cert_names) {
+				char ssl_error_string_buf[256];
 				log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL), s->ssl_ca_file);
+						lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)), s->ssl_ca_file);
 			}
 		}
 
 		if (buffer_string_is_empty(s->ssl_pemfile) || !s->ssl_enabled) continue;
 
 		if (NULL == (s->ssl_ctx = SSL_CTX_new(SSLv23_server_method()))) {
+			char ssl_error_string_buf[256];
 			log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-					ERR_error_string(ERR_get_error(), NULL));
+					lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 			return -1;
 		}
 
 		/* completely useless identifier; required for client cert verification to work with sessions */
 		if (0 == SSL_CTX_set_session_id_context(s->ssl_ctx, (const unsigned char*) CONST_STR_LEN("lighttpd"))) {
+			char ssl_error_string_buf[256];
 			log_error_write(srv, __FILE__, __LINE__, "ss:s", "SSL:",
 				"failed to set session context",
-				ERR_error_string(ERR_get_error(), NULL));
+				lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 			return -1;
 		}
 
@@ -770,8 +777,9 @@
 		if (!s->ssl_use_sslv2) {
 			/* disable SSLv2 */
 			if (!(SSL_OP_NO_SSLv2 & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv2))) {
+				char ssl_error_string_buf[256];
 				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL));
+						lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 				return -1;
 			}
 		}
@@ -779,8 +787,9 @@
 		if (!s->ssl_use_sslv3) {
 			/* disable SSLv3 */
 			if (!(SSL_OP_NO_SSLv3 & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv3))) {
+				char ssl_error_string_buf[256];
 				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL));
+						lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 				return -1;
 			}
 		}
@@ -788,8 +797,9 @@
 		if (!buffer_string_is_empty(s->ssl_cipher_list)) {
 			/* Disable support for low encryption ciphers */
 			if (SSL_CTX_set_cipher_list(s->ssl_ctx, s->ssl_cipher_list->ptr) != 1) {
+				char ssl_error_string_buf[256];
 				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL));
+						lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 				return -1;
 			}
 
@@ -869,8 +879,9 @@
 
 			if (!buffer_string_is_empty(s1->ssl_ca_file)) {
 				if (1 != SSL_CTX_load_verify_locations(s->ssl_ctx, s1->ssl_ca_file->ptr, NULL)) {
+					char ssl_error_string_buf[256];
 					log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-							ERR_error_string(ERR_get_error(), NULL), s1->ssl_ca_file);
+							lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)), s1->ssl_ca_file);
 					return -1;
 				}
 			}
@@ -893,21 +904,24 @@
 		}
 
 		if (SSL_CTX_use_certificate(s->ssl_ctx, s->ssl_pemfile_x509) < 0) {
+			char ssl_error_string_buf[256];
 			log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-					ERR_error_string(ERR_get_error(), NULL), s->ssl_pemfile);
+					lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)), s->ssl_pemfile);
 			return -1;
 		}
 
 		if (SSL_CTX_use_PrivateKey(s->ssl_ctx, s->ssl_pemfile_pkey) < 0) {
+			char ssl_error_string_buf[256];
 			log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-					ERR_error_string(ERR_get_error(), NULL), s->ssl_pemfile);
+					lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)), s->ssl_pemfile);
 			return -1;
 		}
 
 		if (SSL_CTX_check_private_key(s->ssl_ctx) != 1) {
+			char ssl_error_string_buf[256];
 			log_error_write(srv, __FILE__, __LINE__, "sssb", "SSL:",
 					"Private key does not match the certificate public key, reason:",
-					ERR_error_string(ERR_get_error(), NULL),
+					lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
 					s->ssl_pemfile);
 			return -1;
 		}
--- src/network_openssl.c
+++ src/network_openssl.c
@@ -128,10 +128,11 @@
 			case SSL_ERROR_SYSCALL:
 				/* perhaps we have error waiting in our error-queue */
 				if (0 != (err = ERR_get_error())) {
+					char ssl_error_string_buf[256];
 					do {
 						log_error_write(srv, __FILE__, __LINE__, "sdds", "SSL:",
 								ssl_r, r,
-								ERR_error_string(err, NULL));
+								lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 					} while((err = ERR_get_error()));
 				} else if (r == -1) {
 					/* no, but we have errno */
@@ -161,9 +162,10 @@
 				/* fall through */
 			default:
 				while((err = ERR_get_error())) {
+					char ssl_error_string_buf[256];
 					log_error_write(srv, __FILE__, __LINE__, "sdds", "SSL:",
 							ssl_r, r,
-							ERR_error_string(err, NULL));
+							lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
 				}
 				break;
 			}
--- src/server.c
+++ src/server.c
@@ -1583,3 +1583,10 @@
 
 	return 0;
 }
+
+#ifdef USE_OPENSSL
+char* lighttpd_ERR_error_string_n(unsigned long e, char* buf, unsigned long len) {
+	ERR_error_string_n(e, buf, len);
+	return buf;
+}
+#endif
--- src/server.h
+++ src/server.h
@@ -6,4 +6,8 @@
 int config_read(server *srv, const char *fn);
 int config_set_defaults(server *srv);
 
+#ifdef USE_OPENSSL
+char* lighttpd_ERR_error_string_n(unsigned long e, char* buf, unsigned long len);
+#endif
+
 #endif
